[install_branch]
- packages = [ "nano", "vim" ]
- test_output = "test"
- test_output2 = "test"
- test_map = { "test": ["poi1", "poi2"]}

if(test_output == "test")
{

    template("create a template")
    - source_path = "test_template.j2"
    - dest_path = "/tmp/test_template"
    - owner = "neptune"
    - permission = 666
    -> create_file:
       - variables = {
           - checker = 42
           - name = "test-template"
        }

    text_file("read template")
    - file_path = "/tmp/test_template"
    -> read:
       - blossom_output >> test_output

    print("test output")
    - output = "{{test_output}}"

    print("test output of size")
    - output = packages.size()

    for(package : packages)
    {
        print("test output in normal for-each-loop")
        - output = package
    }

    parallel_for(package : packages)
    {
        print("test output in parallel for-each-loop")
        - output = package
    }

    if(packages.size() == 2)
    {
        parallel_for(i = 0; i < packages.size(); i++)
        {
            print("test iter-number in parallel for-loop")
            - output = packages.get(i)

            print("another output test iter-number in parallel for-loop")
            - output = packages.get(i)
        }
    }

    path("copy test-ini-file")
    -> copy:
        - source_path = "test_file"
        - dest_path = "/tmp/test_file"
        

    ini_file("get value from a test-ini-file")
    - file_path = "/tmp/test_file"
    - group = "DEFAULT"
    - entry = "asdf"
    -> read:
        - blossom_output >> test_output
    -> set:
        - value = "123456789"
    -> read:
        - blossom_output >> test_output2

    print("print init-file-output")
    - first_try = test_output
    - second_try = test_output2

    if(packages.contains("nano") == true)
    {
        print("contains successful")
        - answer = "yeah"
    }

    if(packages.contains("asdf") == false)
    {
        print("contains successful negative")
        - answer = "yeah again"
    }

    assert("test-assert {{test_output2}}")
    - test_output2 == "123456789"

    if(test_output2.contains("345") == true)
    {
        print("contains in string successful")
        - answer = "yeah again again"
    }

    
    print("test-output")
    - size = test_map.size()
    - content = test_map.insert("asdf", test_map).get("asdf")
}

